version: "3.2"
services:
  # message bus
  nats:
    image: nats:latest
    container_name: nats
    entrypoint: "/gnatsd -DV"
    ports:
      - 4222:4222
    restart: on-failure
  # Amazon S3 compatible file store
  minio:
    image: minio/minio:latest
    container_name: minio
    volumes:
      - minio:/data
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data
    restart: on-failure
  # dgraph cluster manager
  zero:
    image: dgraph/dgraph:latest
    container_name: zero
    volumes:
      - dgraph:/dgraph
    ports:
      - 5080:5080
      - 6080:6080
    command: dgraph zero --my=zero:5080
    networks:
      - net
    restart: on-failure
  # dgraph node
  dgraph:
    image: dgraph/dgraph:latest
    container_name: dgraph
    volumes:
      - dgraph:/dgraph
    ports:
      - 8080:8080
      - 9080:9080
    command: dgraph server --my=dgraph:7080 --zero=zero:5080 --lru_mb=2048
    networks:
      - net
    restart: on-failure
  # dgraph UI
  ratel:
    image: dgraph/dgraph:latest
    container_name: ratel
    ports:
      - 8000:8000
    command: dgraph-ratel
    networks:
      - net
    restart: on-failure
  # elasticsearch node1
  # see also https://github.com/deviantony/docker-elk
  # todo elasticsearch production config
  elasticsearch:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile-elasticsearch
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - net
    restart: on-failure
  # elasticsearch node2
  elasticsearch2:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile-elasticsearch
    container_name: elasticsearch2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - net
    restart: on-failure
  # kibana - elasticsearch dashboard
  kibana:
    image: docker.elastic.co/kibana/kibana:6.4.1
    container_name: kibana
    environment:
      XPACK_MONITORING_ENABLED: "false"
    volumes:
      - ./config/kibana/:/usr/share/kibana/config:ro
    ports:
      - 5601:5601
    networks:
      - net
    restart: on-failure
  # app API service
  app:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile-app
    container_name: app
    volumes:
      - .:/go/src/github.com/sergeyt/pandora
    ports:
      - 3000:3000
    networks:
      - net
    restart: on-failure
  # pubsub - event streaming service (aka push notifications)
  pubsub:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile-pubsub
    container_name: pubsub
    ports:
      - 4302:4302
    networks:
      - net
    restart: on-failure
  # web server - service gateway
  caddy:
    image: abiosoft/caddy:latest
    container_name: caddy
    volumes:
      - ./Caddyfile:/etc/Caddyfile
      - ./data/caddycerts:/etc/caddycerts
    ports:
      - 4200:4200
    networks:
      - net
    restart: on-failure

volumes:
  minio:
  dgraph:
  esdata1:
  esdata2:

networks:
  net:
